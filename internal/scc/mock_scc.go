// Code generated by MockGen. DO NOT EDIT.
// Source: scc.go
//
// Generated by this command:
//
//	mockgen -source=scc.go -package=scc -destination=mock_scc.go SccAPI
//

// Package scc is a generated GoMock package.
package scc

import (
	context "context"
	reflect "reflect"

	v1 "github.com/openshift/api/security/v1"
	v10 "github.com/openshift/cluster-nfd-operator/api/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockSccAPI is a mock of SccAPI interface.
type MockSccAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSccAPIMockRecorder
	isgomock struct{}
}

// MockSccAPIMockRecorder is the mock recorder for MockSccAPI.
type MockSccAPIMockRecorder struct {
	mock *MockSccAPI
}

// NewMockSccAPI creates a new mock instance.
func NewMockSccAPI(ctrl *gomock.Controller) *MockSccAPI {
	mock := &MockSccAPI{ctrl: ctrl}
	mock.recorder = &MockSccAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSccAPI) EXPECT() *MockSccAPIMockRecorder {
	return m.recorder
}

// DeleteSCC mocks base method.
func (m *MockSccAPI) DeleteSCC(ctx context.Context, sccName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSCC", ctx, sccName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSCC indicates an expected call of DeleteSCC.
func (mr *MockSccAPIMockRecorder) DeleteSCC(ctx, sccName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSCC", reflect.TypeOf((*MockSccAPI)(nil).DeleteSCC), ctx, sccName)
}

// SetTopologySCCAsDesired mocks base method.
func (m *MockSccAPI) SetTopologySCCAsDesired(ctx context.Context, nfdInstance *v10.NodeFeatureDiscovery, topologySCC *v1.SecurityContextConstraints) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTopologySCCAsDesired", ctx, nfdInstance, topologySCC)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTopologySCCAsDesired indicates an expected call of SetTopologySCCAsDesired.
func (mr *MockSccAPIMockRecorder) SetTopologySCCAsDesired(ctx, nfdInstance, topologySCC any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopologySCCAsDesired", reflect.TypeOf((*MockSccAPI)(nil).SetTopologySCCAsDesired), ctx, nfdInstance, topologySCC)
}

// SetWorkerSCCAsDesired mocks base method.
func (m *MockSccAPI) SetWorkerSCCAsDesired(ctx context.Context, nfdInstance *v10.NodeFeatureDiscovery, workerSCC *v1.SecurityContextConstraints) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWorkerSCCAsDesired", ctx, nfdInstance, workerSCC)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWorkerSCCAsDesired indicates an expected call of SetWorkerSCCAsDesired.
func (mr *MockSccAPIMockRecorder) SetWorkerSCCAsDesired(ctx, nfdInstance, workerSCC any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkerSCCAsDesired", reflect.TypeOf((*MockSccAPI)(nil).SetWorkerSCCAsDesired), ctx, nfdInstance, workerSCC)
}
